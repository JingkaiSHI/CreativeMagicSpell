plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
            jvmArgs '-Dfml.earlyprogresswindow=false'
            lazyToken('minecraft_classpath') {
                return configurations.shadow.files.collect { it.getAbsolutePath() }.join(File.pathSeparator)
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
            jvmArgs '-Dfml.earlyprogresswindow=false'
            lazyToken('minecraft_classpath') {
                return configurations.shadow.files.collect { it.getAbsolutePath() }.join(File.pathSeparator)
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mod_id
            mods { "${mod_id}" { source sourceSets.main } }
            jvmArgs '-Dfml.earlyprogresswindow=false'
            lazyToken('minecraft_classpath') {
                return configurations.shadow.files.collect { it.getAbsolutePath() }.join(File.pathSeparator)
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods { "${mod_id}" { source sourceSets.main } }
            jvmArgs '-Dfml.earlyprogresswindow=false'
            lazyToken('minecraft_classpath') {
                return configurations.shadow.files.collect { it.getAbsolutePath() }.join(File.pathSeparator)
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation "com.microsoft.onnxruntime:onnxruntime:1.18.0"
    shadow "com.microsoft.onnxruntime:onnxruntime:1.18.0"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version       : minecraft_version,
        minecraft_version_range : minecraft_version_range,
        forge_version           : forge_version,
        forge_version_range     : forge_version_range,
        loader_version_range    : loader_version_range,
        mod_id                  : mod_id,
        mod_name                : mod_name,
        mod_license             : mod_license,
        mod_version             : mod_version,
        mod_authors             : mod_authors,
        mod_description         : mod_description
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("")
    relocate 'ai.onnxruntime', 'com.outlook.shi_jing_kai.CreativeMagicMod.shadow.ai.onnxruntime'
    mergeServiceFiles()
}

// Unpack shadowJar into a temp directory
def shadowUnpackDir = layout.buildDirectory.dir("unpacked-shadow")

tasks.register("extractShadowJar", Copy) {
    dependsOn shadowJar
    from { zipTree(shadowJar.archiveFile.get().asFile) }
    into shadowUnpackDir
}

// Make jar depend on extracted shadow jar contents
jar {
    dependsOn tasks.named("extractShadowJar")
    archiveClassifier.set("")
    from(shadowUnpackDir)

    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
